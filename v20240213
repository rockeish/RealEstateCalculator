<!DOCTYPE html>
<html>

<head>
    <title>Real Estate Calculator</title>
    <style>
        body {
            background-color: lightblue;
        }

        .slider {
            width: 100%;
        }

        .value-display {
            margin-left: 10px;
        }
    </style>
</head>

<body>
    <h1>Real Estate Calculator</h1>
    <form method="post">
        <!-- Purchase Information -->
        <fieldset>
            <legend>Purchase Information</legend>

            <!-- Purchase Price -->
            <label for="purchase_price">Purchase Price ($): <span id="purchase_price_display" class="value-display">1395000</span></label><br>
            <input type="range" id="purchase_price_slider" min="0" max="5000000" step="50000" value="1395000" oninput="syncInput('purchase_price', this.value)">
            <input type="number" id="purchase_price" name="purchase_price" min="0" step="0.01" value="1395000" oninput="syncSlider('purchase_price', this.value)"><br>

            <!-- Down Payment -->
            <label for="down_payment">Down Payment ($): <span id="down_payment_display" class="value-display">0</span></label><br>
            <input type="range" id="down_payment_slider" min="0" max="500000" step="10000" value="0" oninput="syncInput('down_payment', this.value)">
            <input type="number" id="down_payment" name="down_payment" min="0" step="0.01" value="0" oninput="syncSlider('down_payment', this.value)"><br>

            <!-- Closing Cost -->
            <label for="closing_cost">Closing Cost ($): <span id="closing_cost_display" class="value-display">0</span></label><br>
            <input type="range" id="closing_cost_slider" min="0" max="100000" step="1000" value="0" oninput="syncInput('closing_cost', this.value)">
            <input type="number" id="closing_cost" name="closing_cost" min="0" step="0.01" value="0" oninput="syncSlider('closing_cost', this.value)"><br>

            <!-- Other Initial Costs -->
            <label for="other_initial_cost">Other Initial Costs ($): <span id="other_initial_cost_display" class="value-display">66000</span></label><br>
            <input type="range" id="other_initial_cost_slider" min="0" max="100000" step="1000" value="66000" oninput="syncInput('other_initial_cost', this.value)">
            <input type="number" id="other_initial_cost" name="other_initial_cost" min="0" step="0.01" value="66000" oninput="syncSlider('other_initial_cost', this.value)"><br>

            <!-- Interest Rate -->
            <label for="interest_rate">Interest Rate (%): <span id="interest_rate_display" class="value-display">2.625</span></label><br>
            <input type="range" id="interest_rate_slider" min="0" max="10" step="0.125" value="2.625" oninput="syncInput('interest_rate', this.value)">
            <input type="number" id="interest_rate" name="interest_rate" min="0" step="0.01" value="2.625" oninput="syncSlider('interest_rate', this.value)"><br>

            <!-- Loan Term -->
            <label for="loan_term">Loan Term (years): <span id="loan_term_display" class="value-display">30</span></label><br>
            <input type="range" id="loan_term_slider" min="1" max="30" step="1" value="30" oninput="syncInput('loan_term', this.value)">
            <input type="number" id="loan_term" name="loan_term" min="1" max="30" value="30" oninput="syncSlider('loan_term', this.value)"><br>
        </fieldset>

        <!-- Expenses Information -->
        <fieldset>
            <legend>Expenses Information</legend>

            <!-- Vacancy Rate -->
            <label for="vacancy_rate">Vacancy Rate (% monthly): <span id="vacancy_rate_display" class="value-display">5.5</span></label><br>
            <input type="range" id="vacancy_rate_slider" min="0" max="100" step="0.01" value="5.5" oninput="syncInput('vacancy_rate', this.value)">
            <input type="number" id="vacancy_rate" name="vacancy_rate" min="0" max="100" step="0.01" value="5.5" oninput="syncSlider('vacancy_rate', this.value)"><br>

            <!-- Repairs and Maintenance -->
            <label for="repairs_maintenance">Repairs and Maintenance ($ monthly): <span id="repairs_maintenance_display" class="value-display">300</span></label><br>
            <input type="range" id="repairs_maintenance_slider" min="0" max="5000" step="100" value="300" oninput="syncInput('repairs_maintenance', this.value)">
            <input type="number" id="repairs_maintenance" name="repairs_maintenance" min="0" step="0.01" value="300" oninput="syncSlider('repairs_maintenance', this.value)"><br>

            <!-- Property Management -->
            <label for="property_management">Property Management (% monthly): <span id="property_management_display" class="value-display">0</span></label><br>
            <input type="range" id="property_management_slider" min="0" max="100" step="0.01" value="0" oninput="syncInput('property_management', this.value)">
            <input type="number" id="property_management" name="property_management" min="0" max="100" step="0.01" value="0" oninput="syncSlider('property_management', this.value)"><br>

            <!-- Property Taxes -->
            <label for="taxes">Property Taxes ($ yearly): <span id="taxes_display" class="value-display">15000</span></label><br>
            <input type="range" id="taxes_slider" min="0" max="50000" step="1000" value="15000" oninput="syncInput('taxes', this.value)">
            <input type="number" id="taxes" name="taxes" min="0" step="0.01" value="15000" oninput="syncSlider('taxes', this.value)"><br>

            <!-- Insurance -->
            <label for="insurance">Insurance ($ yearly): <span id="insurance_display" class="value-display">2200</span></label><br>
            <input type="range" id="insurance_slider" min="0" max="10000" step="100" value="2200" oninput="syncInput('insurance', this.value)">
            <input type="number" id="insurance" name="insurance" min="0" step="0.01" value="2200" oninput="syncSlider('insurance', this.value)"><br>

            <!-- Utilities -->
            <label for="utilities">Utilities ($ monthly): <span id="utilities_display" class="value-display">300</span></label><br>
            <input type="range" id="utilities_slider" min="0" max="2000" step="50" value="300" oninput="syncInput('utilities', this.value)">
            <input type="number" id="utilities" name="utilities" min="0" step="0.01" value="300" oninput="syncSlider('utilities', this.value)"><br>

            <!-- Other Expenses -->
            <label for="other_expenses">Other ($ monthly): <span id="other_expenses_display" class="value-display">60</span></label><br>
            <input type="range" id="other_expenses_slider" min="0" max="5000" step="50" value="60" oninput="syncInput('other_expenses', this.value)">
            <input type="number" id="other_expenses" name="other_expenses" min="0" step="0.01" value="60" oninput="syncSlider('other_expenses', this.value)"><br>
        </fieldset>

        <!-- Rental Information -->
        <fieldset>
            <legend>Rental Information</legend>

            <!-- Unit #1 Rent -->
            <label for="unit1_rent">Unit #1 Rent: <span id="unit1_rent_display" class="value-display">1750</span></label><br>
            <input type="range" id="unit1_rent_slider" min="0" max="5000" step="50" value="1750" oninput="syncInput('unit1_rent', this.value)">
            <input type="number" id="unit1_rent" name="unit1_rent" min="0" step="0.01" value="1750" oninput="syncSlider('unit1_rent', this.value)"><br>

            <!-- Unit #2 Rent -->
            <label for="unit2_rent">Unit #2 Rent: <span id="unit2_rent_display" class="value-display">1700</span></label><br>
            <input type="range" id="unit2_rent_slider" min="0" max="5000" step="50" value="1700" oninput="syncInput('unit2_rent', this.value)">
            <input type="number" id="unit2_rent" name="unit2_rent" min="0" step="0.01" value="1700" oninput="syncSlider('unit2_rent', this.value)"><br>

            <!-- Unit #3 Rent -->
            <label for="unit3_rent">Unit #3 Rent: <span id="unit3_rent_display" class="value-display">1660</span></label><br>
            <input type="range" id="unit3_rent_slider" min="0" max="5000" step="50" value="1660" oninput="syncInput('unit3_rent', this.value)">
            <input type="number" id="unit3_rent" name="unit3_rent" min="0" step="0.01" value="1660" oninput="syncSlider('unit3_rent', this.value)"><br>

            <!-- Unit #4 Rent -->
            <label for="unit4_rent">Unit #4 Rent: <span id="unit4_rent_display" class="value-display">2200</span></label><br>
            <input type="range" id="unit4_rent_slider" min="0" max="5000" step="50" value="2200" oninput="syncInput('unit4_rent', this.value)">
            <input type="number" id="unit4_rent" name="unit4_rent" min="0" step="0.01" value="2200" oninput="syncSlider('unit4_rent', this.value)"><br>

        </fieldset>
        <br>

        <button type="button" onclick="calculate()">Calculate</button>

    </form>

    <!-- output values: -->

    <h2>Initial Costs</h2>
    <div class="row">
        <div class="column">
            <label for="initial_cost_purchase_price">Purchase Price</label><br>
            <input type="text" id="initial_cost_purchase_price" name="initial_cost_purchase_price" readonly><br>

            <label for="initial_cost_down_payment">Down Payment</label><br>
            <input type="text" id="initial_cost_down_payment" name="initial_cost_down_payment" readonly><br>

            <label for="initial_cost_closing_cost">Closing Cost</label><br>
            <input type="text" id="initial_cost_closing_cost" name="initial_cost_closing_cost" readonly><br>

            <label for="initial_cost_other">Other Initial Costs</label><br>
            <input type="text" id="initial_cost_other" name="initial_cost_other" readonly><br>

            <label for="total_initial_cost">Total Initial Cost</label><br>
            <input type="text" id="total_initial_cost" name="total_initial_cost" readonly><br>
        </div>
    </div>

    <h2>Monthly Expenses</h2>
    <div class="row">
        <div class="column">
            <label for="monthly_expense_loan_payment">Loan Payment</label><br>
            <input type="text" id="monthly_expense_loan_payment" name="monthly_expense_loan_payment" readonly><br>

            <label for="monthly_expense_vacancy_loss">Vacancy Loss</label><br>
            <input type="text" id="monthly_expense_vacancy_loss" name="monthly_expense_vacancy_loss" readonly><br>

            <label for="monthly_expense_repairs_and_maintenance">Repairs and Maintenance</label><br>
            <input type="text" id="monthly_expense_repairs_and_maintenance" name="monthly_expense_repairs_and_maintenance" readonly><br>

            <label for="monthly_expense_property_management_fee">Property Management Fee</label><br>
            <input type="text" id="monthly_expense_property_management_fee" name="monthly_expense_property_management_fee" readonly><br>

            <label for="monthly_expense_taxes">Property Taxes</label><br>
            <input type="text" id="monthly_expense_taxes" name="monthly_expense_taxes" readonly><br>

            <label for="monthly_expense_insurance">Insurance</label><br>
            <input type="text" id="monthly_expense_insurance" name="monthly_expense_insurance" readonly><br>

            <label for="monthly_expense_utilities">Utilities</label><br>
            <input type="text" id="monthly_expense_utilities" name="monthly_expense_utilities" readonly><br>

            <label for="monthly_expense_other">Other Expenses</label><br>
            <input type="text" id="monthly_expense_other" name="monthly_expense_other" readonly><br>

            <label for="total_monthly_expenses">Total Monthly Expenses</label><br>
            <input type="text" id="total_monthly_expenses" name="total_monthly_expenses" readonly><br>
        </div>
    </div>

    <h2>Performance Metrics</h2>
    <div class="row">
        <div class="column">
            <label for="yearly_net_income">Yearly Net Income</label><br>
            <input type="text" id="yearly_net_income" name="yearly_net_income" readonly><br>

            <label for="roi">ROI</label><br>
            <input type="text" id="roi" name="roi" readonly><br>

            <label for="cap_rate">Cap Rate</label><br>
            <input type="text" id="cap_rate" name="cap_rate" readonly><br>

            <label for="noi">NOI</label><br>
            <input type="text" id="noi" name="noi" readonly><br>

            <label for="grm">GRM</label><br>
            <input type="text" id="grm" name="grm" readonly><br>
        </div>
    </div>


    <!-- Canvas for Chart.js -->
    
    <!-- 1. Cash Flow Projection Chart -->
    <canvas id="cashFlowProjectionChart" width="400" height="200"></canvas>
    
    <!-- 2. Cap Rate Trend Chart -->
    <canvas id="capRateTrendChart" width="400" height="200"></canvas>
    
    <!-- 3. Break-Even Point Chart -->
    <canvas id="breakEvenChart" width="400" height="200"></canvas>
    
    <!-- 4. Property Value Appreciation Chart -->
    <canvas id="propertyValueChart" width="400" height="200"></canvas>
    
    <!-- 5. Loan Balance Over Time Chart -->
    <canvas id="loanBalanceChart" width="400" height="200"></canvas>
    
    <!-- 6. Expense Breakdown Pie Chart -->
    <canvas id="expenseBreakdownChart" width="400" height="200"></canvas>
    
    <!-- 7. Rent Increase Trend Chart -->
    <canvas id="rentIncreaseChart" width="400" height="200"></canvas>
    
    <!-- 8. NOI Growth Chart -->
    <canvas id="noiGrowthChart" width="400" height="200"></canvas>
    
    <!-- 9. Cash on Cash Return Chart -->
    <canvas id="cashOnCashReturnChart" width="400" height="200"></canvas>
    
    <!-- 10. Debt Service Coverage Ratio (DSCR) Chart -->
    <canvas id="dscrChart" width="400" height="200"></canvas>

    <!-- scripts for charts, calc -->

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="calculator.js"></script>

    <script>


        function syncInput(id, value) {
            document.getElementById(id).value = value;
            document.getElementById(id + "_display").innerText = value;
            calculate(); // Recalculate values when slider changes
        }

        function syncSlider(id, value) {
            document.getElementById(id + "_slider").value = value;
            document.getElementById(id + "_display").innerText = value;
            calculate(); // Recalculate values when input changes
        }


        function calculate() {
            // get input values
            const purchasePrice = Number(document.getElementById("purchase_price").value);
            const downPayment = Number(document.getElementById("down_payment").value);
            const closingCost = Number(document.getElementById("closing_cost").value);
            const otherInitialCost = Number(document.getElementById("other_initial_cost").value);
            const interestRate = Number(document.getElementById("interest_rate").value) / 100 / 12;
            const loanTerm = Number(document.getElementById("loan_term").value) * 12;
            const vacancyRate = Number(document.getElementById("vacancy_rate").value) / 100 / 12;
            const repairsMaintenance = Number(document.getElementById("repairs_maintenance").value);
            const propertyManagement = Number(document.getElementById("property_management").value) / 100 / 12;
            const taxes = Number(document.getElementById("taxes").value) / 12;
            const insurance = Number(document.getElementById("insurance").value) / 12;
            const utilities = Number(document.getElementById("utilities").value);
            const otherExpenses = Number(document.getElementById("other_expenses").value);
            const unit1Rent = Number(document.getElementById("unit1_rent").value);
            const unit2Rent = Number(document.getElementById("unit2_rent").value);
            const unit3Rent = Number(document.getElementById("unit3_rent").value);
            const unit4Rent = Number(document.getElementById("unit4_rent").value);


            // Calculate initial cost
            var initialCostDownPayment = downPayment;
            var initialCostPurchasePrice = purchasePrice;
            var initialCostClosingCost = closingCost;
            var initialCostOther = otherInitialCost;
            var totalInitialCost = downPayment + closingCost + otherInitialCost;

            // Calculate monthly expenses
            var monthlyExpenseLoanPayment = calculateLoanPayment(purchasePrice - downPayment, interestRate, loanTerm);
            var monthlyExpenseVacancyLoss = calculateVacancyLoss(unit1Rent, unit2Rent, unit3Rent, unit4Rent, vacancyRate);
            var monthlyExpenseRepairsMaintenance = repairsMaintenance;
            var monthlyExpensePropertyManagementFee = calculatePropertyManagementFee(unit1Rent, unit2Rent, unit3Rent, unit4Rent, propertyManagement);
            var monthlyExpenseTaxes = taxes;
            var monthlyExpenseInsurance = insurance;
            var monthlyExpenseUtilities = utilities;
            var monthlyExpenseOther = otherExpenses;
            var totalMonthlyExpenses = monthlyExpenseLoanPayment + monthlyExpenseVacancyLoss + monthlyExpenseRepairsMaintenance + monthlyExpensePropertyManagementFee + monthlyExpenseTaxes + monthlyExpenseInsurance + monthlyExpenseUtilities + monthlyExpenseOther;

            // Calculate Performance Metrics
            var grossRentalIncome = unit1Rent + unit2Rent + unit3Rent + unit4Rent;
            var effectiveRentalIncome = grossRentalIncome * (1 - vacancyRate);
            var grossIncome = effectiveRentalIncome;
            var operatingExpense = monthlyExpenseLoanPayment + monthlyExpenseVacancyLoss + monthlyExpenseRepairsMaintenance + monthlyExpensePropertyManagementFee + monthlyExpenseTaxes + monthlyExpenseInsurance + monthlyExpenseUtilities + monthlyExpenseOther;
            var netIncome = grossIncome - operatingExpense;
            var yearlyNetIncome = netIncome * 12;
            var roi = yearlyNetIncome / totalInitialCost * 100;
            var capRate = netIncome / purchasePrice * 100;
            var noi = netIncome + taxes / 12;
            var grm = purchasePrice / grossRentalIncome;

            // display output values

            //initial cost 
            document.getElementById("initial_cost_purchase_price").value = initialCostPurchasePrice.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
            document.getElementById("initial_cost_down_payment").value = initialCostDownPayment.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
            document.getElementById("initial_cost_closing_cost").value = initialCostClosingCost.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
            document.getElementById("initial_cost_other").value = initialCostOther.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
            document.getElementById("total_initial_cost").value = totalInitialCost.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });

            //monthly cost  
            document.getElementById("monthly_expense_loan_payment").value = monthlyExpenseLoanPayment.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
            document.getElementById("monthly_expense_vacancy_loss").value = monthlyExpenseVacancyLoss.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
            document.getElementById("monthly_expense_repairs_and_maintenance").value = monthlyExpenseRepairsMaintenance.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
            document.getElementById("monthly_expense_property_management_fee").value = monthlyExpensePropertyManagementFee.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
            document.getElementById("monthly_expense_taxes").value = monthlyExpenseTaxes.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
            document.getElementById("monthly_expense_insurance").value = monthlyExpenseInsurance.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
            document.getElementById("monthly_expense_utilities").value = monthlyExpenseUtilities.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
            document.getElementById("monthly_expense_other").value = monthlyExpenseOther.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
            document.getElementById("total_monthly_expenses").value = totalMonthlyExpenses.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });

            //add performance metrics 
            document.getElementById("yearly_net_income").value = yearlyNetIncome.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
            document.getElementById("roi").value = roi
            document.getElementById("cap_rate").value = capRate
            document.getElementById("noi").value = noi
            document.getElementById("grm").value = grm


            // supportng functions for calculations 	

            function calculateLoanPayment(amount, interest_rate, term) {
                var rate = interest_rate;
                var payment = amount * rate / (1 - Math.pow(1 + rate, -term));
                return payment;
            }

            function calculateVacancyLoss(rent1, rent2, rent3, rent4, vacancy_rate) {
                var total_rent = rent1 + rent2 + rent3 + rent4;
                var vacancy_loss = total_rent * vacancy_rate;
                return vacancy_loss;
            }

            function calculatePropertyManagementFee(rent1, rent2, rent3, rent4, management_fee) {
                var total_rent = rent1 + rent2 + rent3 + rent4;
                var property_management_fee = total_rent * management_fee;
                return property_management_fee;
            }

            function formatCurrency(amount) {
                var formatter = new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                });
                return formatter.format(amount);
            }

            function numberWithCommas(x) {
                return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            }

            //calculations for charts.... 
            
            function updateCashFlowProjectionChart() {
                const ctx = document.getElementById('cashFlowProjectionChart').getContext('2d');
                let cashFlows = [];
                let years = Array.from({ length: 30 }, (_, i) => i + 1);
                let currentIncome = grossRentalIncome * 12; // Annualize
                let currentExpenses = totalMonthlyExpenses * 12;
            
                years.forEach(year => {
                    let projectedIncome = currentIncome * Math.pow(1.03, year); // 3% growth per year
                    let projectedExpenses = currentExpenses * Math.pow(1.02, year); // 2% growth per year
                    cashFlows.push(projectedIncome - projectedExpenses);
                });
            
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: years,
                        datasets: [{
                            label: 'Annual Cash Flow',
                            data: cashFlows,
                            backgroundColor: 'rgba(54, 162, 235, 0.2)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }
            
            function updateCapRateTrendChart() {
                const ctx = document.getElementById('capRateTrendChart').getContext('2d');
                let capRates = [];
                let years = Array.from({ length: 30 }, (_, i) => i + 1);
                let currentValue = purchasePrice; // Starting value
            
                years.forEach(year => {
                    let projectedNOI = noi * Math.pow(1.03, year); // 3% growth per year
                    let projectedValue = currentValue * Math.pow(1.04, year); // 4% appreciation per year
                    capRates.push((projectedNOI / projectedValue) * 100);
                });
            
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: years,
                        datasets: [{
                            label: 'Cap Rate (%)',
                            data: capRates,
                            backgroundColor: 'rgba(255, 99, 132, 0.2)',
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }
            
            function updateBreakEvenChart() {
                const ctx = document.getElementById('breakEvenChart').getContext('2d');
                
                let years = [];
                let cumulativeNetIncome = [];
                let totalInvestmentLine = [];
                let totalYearsToBreakEven = totalInitialCost / yearlyNetIncome;
                let cumulativeIncome = 0;
            
                for (let year = 1; year <= totalYearsToBreakEven + 5; year++) { // Extra 5 years for extended view
                    cumulativeIncome += yearlyNetIncome;
                    cumulativeNetIncome.push(cumulativeIncome);
                    totalInvestmentLine.push(totalInitialCost);
                    years.push(year);
                }
            
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: years,
                        datasets: [
                            {
                                label: 'Cumulative Net Income',
                                data: cumulativeNetIncome,
                                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                                borderColor: 'rgba(54, 162, 235, 1)',
                                borderWidth: 1,
                                fill: false
                            },
                            {
                                label: 'Total Initial Investment',
                                data: totalInvestmentLine,
                                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                                borderColor: 'rgba(255, 99, 132, 1)',
                                borderWidth: 1,
                                fill: false
                            }
                        ]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        },
                        elements: {
                            point:{
                                radius: 0 // Remove points for a cleaner look
                            }
                        }
                    }
                });
            }

            
            function updatePropertyValueChart() {
                const ctx = document.getElementById('propertyValueChart').getContext('2d');
                let propertyValues = [];
                let years = Array.from({ length: 30 }, (_, i) => i + 1);
                let currentValue = purchasePrice;
            
                years.forEach(year => {
                    let projectedValue = currentValue * Math.pow(1.04, year); // 4% appreciation per year
                    propertyValues.push(projectedValue);
                });
            
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: years,
                        datasets: [{
                            label: 'Property Value',
                            data: propertyValues,
                            backgroundColor: 'rgba(255, 206, 86, 0.2)',
                            borderColor: 'rgba(255, 206, 86, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: false
                            }
                        }
                    }
                });
            }
            
            function updateLoanBalanceChart() {
                const ctx = document.getElementById('loanBalanceChart').getContext('2d');
                let loanBalances = [];
                let years = Array.from({ length: loanTerm / 12 }, (_, i) => i + 1);
                let currentBalance = purchasePrice - downPayment;
            
                years.forEach(year => {
                    // Calculate remaining balance; for simplicity, using straight-line amortization
                    let balanceReduction = (purchasePrice - downPayment) / (loanTerm / 12);
                    let newBalance = currentBalance - balanceReduction * year;
                    loanBalances.push(newBalance > 0 ? newBalance : 0);
                });
            
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: years,
                        datasets: [{
                            label: 'Remaining Loan Balance',
                            data: loanBalances,
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: false
                            }
                        }
                    }
                });
            }
            
            function updateExpenseBreakdownChart() {
                const ctx = document.getElementById('expenseBreakdownChart').getContext('2d');
                let expenses = [repairsMaintenance, propertyManagement, taxes, insurance, utilities, otherExpenses];
            
                new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: ['Repairs & Maintenance', 'Property Management', 'Taxes', 'Insurance', 'Utilities', 'Other'],
                        datasets: [{
                            label: 'Expense Breakdown',
                            data: expenses,
                            backgroundColor: [
                                'rgba(255, 99, 132, 0.5)',
                                'rgba(54, 162, 235, 0.5)',
                                'rgba(255, 206, 86, 0.5)',
                                'rgba(75, 192, 192, 0.5)',
                                'rgba(153, 102, 255, 0.5)',
                                'rgba(255, 159, 64, 0.5)'
                            ]
                        }]
                    }
                });
            }
            
            function updateRentIncreaseChart() {
                const ctx = document.getElementById('rentIncreaseChart').getContext('2d');
                let annualRents = [];
                let years = Array.from({ length: 30 }, (_, i) => i + 1);
                let currentRent = unit1Rent + unit2Rent + unit3Rent + unit4Rent;
            
                years.forEach(year => {
                    let projectedRent = currentRent * Math.pow(1.03, year); // 3% increase per year
                    annualRents.push(projectedRent);
                });
            
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: years,
                        datasets: [{
                            label: 'Annual Rent',
                            data: annualRents,
                            backgroundColor: 'rgba(255, 159, 64, 0.2)',
                            borderColor: 'rgba(255, 159, 64, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: false
                            }
                        }
                    }
                });
            }
            
            function updateNOIGrowthChart() {
                const ctx = document.getElementById('noiGrowthChart').getContext('2d');
                let noiValues = [];
                let years = Array.from({ length: 30 }, (_, i) => i + 1);
            
                years.forEach(year => {
                    let projectedNOI = noi * Math.pow(1.03, year); // 3% NOI growth per year
                    noiValues.push(projectedNOI);
                });
            
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: years,
                        datasets: [{
                            label: 'Net Operating Income (NOI)',
                            data: noiValues,
                            backgroundColor: 'rgba(153, 102, 255, 0.2)',
                            borderColor: 'rgba(153, 102, 255, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: false
                            }
                        }
                    }
                });
            }
            
            function updateCashOnCashReturnChart() {
                const ctx = document.getElementById('cashOnCashReturnChart').getContext('2d');
                let cashOnCashReturns = [];
                let years = Array.from({ length: 30 }, (_, i) => i + 1);
            
                years.forEach(year => {
                    let yearlyIncome = calculateYearlyNetIncome(year);
                    let cashOnCashReturn = (yearlyIncome / totalInitialCost) * 100;
                    cashOnCashReturns.push(cashOnCashReturn);
                });
            
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: years,
                        datasets: [{
                            label: 'Cash on Cash Return (%)',
                            data: cashOnCashReturns,
                            backgroundColor: 'rgba(54, 162, 235, 0.2)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }
            
            function updateDSCRChart() {
                const ctx = document.getElementById('dscrChart').getContext('2d');
                let dscrValues = [];
                let years = Array.from({ length: 30 }, (_, i) => i + 1);
            
                years.forEach(year => {
                    let yearlyNOI = calculateYearlyNetIncome(year) + (taxes + insurance) * 12; // NOI includes taxes and insurance
                    let dscr = yearlyNOI / (monthlyExpenseLoanPayment * 12);
                    dscrValues.push(dscr);
                });
            
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: years,
                        datasets: [{
                            label: 'Debt Service Coverage Ratio (DSCR)',
                            data: dscrValues,
                            backgroundColor: 'rgba(255, 99, 132, 0.2)',
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: false
                            }
                        }
                    }
                });
            }

            // Function calls to update each chart
            updateCashFlowProjectionChart();
            updateCapRateTrendChart();
            updateBreakEvenChart();
            updatePropertyValueChart();
            updateLoanBalanceChart();
            updateExpenseBreakdownChart();
            updateRentIncreaseChart();
            updateNOIGrowthChart();
            updateCashOnCashReturnC<!DOCTYPE html>
<html>

<head>
    <title>Real Estate Calculator</title>
    <style>
        body {
            background-color: lightblue;
        }

        .slider {
            width: 100%;
        }

        .value-display {
            margin-left: 10px;
        }
    </style>
</head>

<body>
    <h1>Real Estate Calculator</h1>
    <form method="post">
        <!-- Purchase Information -->
        <fieldset>
            <legend>Purchase Information</legend>

            <!-- Purchase Price -->
            <label for="purchase_price">Purchase Price ($): <span id="purchase_price_display" class="value-display">1395000</span></label><br>
            <input type="range" id="purchase_price_slider" min="0" max="5000000" step="50000" value="1395000" oninput="syncInput('purchase_price', this.value)">
            <input type="number" id="purchase_price" name="purchase_price" min="0" step="0.01" value="1395000" oninput="syncSlider('purchase_price', this.value)"><br>

            <!-- Down Payment -->
            <label for="down_payment">Down Payment ($): <span id="down_payment_display" class="value-display">0</span></label><br>
            <input type="range" id="down_payment_slider" min="0" max="500000" step="10000" value="0" oninput="syncInput('down_payment', this.value)">
            <input type="number" id="down_payment" name="down_payment" min="0" step="0.01" value="0" oninput="syncSlider('down_payment', this.value)"><br>

            <!-- Closing Cost -->
            <label for="closing_cost">Closing Cost ($): <span id="closing_cost_display" class="value-display">0</span></label><br>
            <input type="range" id="closing_cost_slider" min="0" max="100000" step="1000" value="0" oninput="syncInput('closing_cost', this.value)">
            <input type="number" id="closing_cost" name="closing_cost" min="0" step="0.01" value="0" oninput="syncSlider('closing_cost', this.value)"><br>

            <!-- Other Initial Costs -->
            <label for="other_initial_cost">Other Initial Costs ($): <span id="other_initial_cost_display" class="value-display">66000</span></label><br>
            <input type="range" id="other_initial_cost_slider" min="0" max="100000" step="1000" value="66000" oninput="syncInput('other_initial_cost', this.value)">
            <input type="number" id="other_initial_cost" name="other_initial_cost" min="0" step="0.01" value="66000" oninput="syncSlider('other_initial_cost', this.value)"><br>

            <!-- Interest Rate -->
            <label for="interest_rate">Interest Rate (%): <span id="interest_rate_display" class="value-display">2.625</span></label><br>
            <input type="range" id="interest_rate_slider" min="0" max="10" step="0.125" value="2.625" oninput="syncInput('interest_rate', this.value)">
            <input type="number" id="interest_rate" name="interest_rate" min="0" step="0.01" value="2.625" oninput="syncSlider('interest_rate', this.value)"><br>

            <!-- Loan Term -->
            <label for="loan_term">Loan Term (years): <span id="loan_term_display" class="value-display">30</span></label><br>
            <input type="range" id="loan_term_slider" min="1" max="30" step="1" value="30" oninput="syncInput('loan_term', this.value)">
            <input type="number" id="loan_term" name="loan_term" min="1" max="30" value="30" oninput="syncSlider('loan_term', this.value)"><br>
        </fieldset>

        <!-- Expenses Information -->
        <fieldset>
            <legend>Expenses Information</legend>

            <!-- Vacancy Rate -->
            <label for="vacancy_rate">Vacancy Rate (% monthly): <span id="vacancy_rate_display" class="value-display">5.5</span></label><br>
            <input type="range" id="vacancy_rate_slider" min="0" max="100" step="0.01" value="5.5" oninput="syncInput('vacancy_rate', this.value)">
            <input type="number" id="vacancy_rate" name="vacancy_rate" min="0" max="100" step="0.01" value="5.5" oninput="syncSlider('vacancy_rate', this.value)"><br>

            <!-- Repairs and Maintenance -->
            <label for="repairs_maintenance">Repairs and Maintenance ($ monthly): <span id="repairs_maintenance_display" class="value-display">300</span></label><br>
            <input type="range" id="repairs_maintenance_slider" min="0" max="5000" step="100" value="300" oninput="syncInput('repairs_maintenance', this.value)">
            <input type="number" id="repairs_maintenance" name="repairs_maintenance" min="0" step="0.01" value="300" oninput="syncSlider('repairs_maintenance', this.value)"><br>

            <!-- Property Management -->
            <label for="property_management">Property Management (% monthly): <span id="property_management_display" class="value-display">0</span></label><br>
            <input type="range" id="property_management_slider" min="0" max="100" step="0.01" value="0" oninput="syncInput('property_management', this.value)">
            <input type="number" id="property_management" name="property_management" min="0" max="100" step="0.01" value="0" oninput="syncSlider('property_management', this.value)"><br>

            <!-- Property Taxes -->
            <label for="taxes">Property Taxes ($ yearly): <span id="taxes_display" class="value-display">15000</span></label><br>
            <input type="range" id="taxes_slider" min="0" max="50000" step="1000" value="15000" oninput="syncInput('taxes', this.value)">
            <input type="number" id="taxes" name="taxes" min="0" step="0.01" value="15000" oninput="syncSlider('taxes', this.value)"><br>

            <!-- Insurance -->
            <label for="insurance">Insurance ($ yearly): <span id="insurance_display" class="value-display">2200</span></label><br>
            <input type="range" id="insurance_slider" min="0" max="10000" step="100" value="2200" oninput="syncInput('insurance', this.value)">
            <input type="number" id="insurance" name="insurance" min="0" step="0.01" value="2200" oninput="syncSlider('insurance', this.value)"><br>

            <!-- Utilities -->
            <label for="utilities">Utilities ($ monthly): <span id="utilities_display" class="value-display">300</span></label><br>
            <input type="range" id="utilities_slider" min="0" max="2000" step="50" value="300" oninput="syncInput('utilities', this.value)">
            <input type="number" id="utilities" name="utilities" min="0" step="0.01" value="300" oninput="syncSlider('utilities', this.value)"><br>

            <!-- Other Expenses -->
            <label for="other_expenses">Other ($ monthly): <span id="other_expenses_display" class="value-display">60</span></label><br>
            <input type="range" id="other_expenses_slider" min="0" max="5000" step="50" value="60" oninput="syncInput('other_expenses', this.value)">
            <input type="number" id="other_expenses" name="other_expenses" min="0" step="0.01" value="60" oninput="syncSlider('other_expenses', this.value)"><br>
        </fieldset>

        <!-- Rental Information -->
        <fieldset>
            <legend>Rental Information</legend>

            <!-- Unit #1 Rent -->
            <label for="unit1_rent">Unit #1 Rent: <span id="unit1_rent_display" class="value-display">1750</span></label><br>
            <input type="range" id="unit1_rent_slider" min="0" max="5000" step="50" value="1750" oninput="syncInput('unit1_rent', this.value)">
            <input type="number" id="unit1_rent" name="unit1_rent" min="0" step="0.01" value="1750" oninput="syncSlider('unit1_rent', this.value)"><br>

            <!-- Unit #2 Rent -->
            <label for="unit2_rent">Unit #2 Rent: <span id="unit2_rent_display" class="value-display">1700</span></label><br>
            <input type="range" id="unit2_rent_slider" min="0" max="5000" step="50" value="1700" oninput="syncInput('unit2_rent', this.value)">
            <input type="number" id="unit2_rent" name="unit2_rent" min="0" step="0.01" value="1700" oninput="syncSlider('unit2_rent', this.value)"><br>

            <!-- Unit #3 Rent -->
            <label for="unit3_rent">Unit #3 Rent: <span id="unit3_rent_display" class="value-display">1660</span></label><br>
            <input type="range" id="unit3_rent_slider" min="0" max="5000" step="50" value="1660" oninput="syncInput('unit3_rent', this.value)">
            <input type="number" id="unit3_rent" name="unit3_rent" min="0" step="0.01" value="1660" oninput="syncSlider('unit3_rent', this.value)"><br>

            <!-- Unit #4 Rent -->
            <label for="unit4_rent">Unit #4 Rent: <span id="unit4_rent_display" class="value-display">2200</span></label><br>
            <input type="range" id="unit4_rent_slider" min="0" max="5000" step="50" value="2200" oninput="syncInput('unit4_rent', this.value)">
            <input type="number" id="unit4_rent" name="unit4_rent" min="0" step="0.01" value="2200" oninput="syncSlider('unit4_rent', this.value)"><br>

        </fieldset>
        <br>

        <button type="button" onclick="calculate()">Calculate</button>

    </form>

    <!-- output values: -->

    <h2>Initial Costs</h2>
    <div class="row">
        <div class="column">
            <label for="initial_cost_purchase_price">Purchase Price</label><br>
            <input type="text" id="initial_cost_purchase_price" name="initial_cost_purchase_price" readonly><br>

            <label for="initial_cost_down_payment">Down Payment</label><br>
            <input type="text" id="initial_cost_down_payment" name="initial_cost_down_payment" readonly><br>

            <label for="initial_cost_closing_cost">Closing Cost</label><br>
            <input type="text" id="initial_cost_closing_cost" name="initial_cost_closing_cost" readonly><br>

            <label for="initial_cost_other">Other Initial Costs</label><br>
            <input type="text" id="initial_cost_other" name="initial_cost_other" readonly><br>

            <label for="total_initial_cost">Total Initial Cost</label><br>
            <input type="text" id="total_initial_cost" name="total_initial_cost" readonly><br>
        </div>
    </div>

    <h2>Monthly Expenses</h2>
    <div class="row">
        <div class="column">
            <label for="monthly_expense_loan_payment">Loan Payment</label><br>
            <input type="text" id="monthly_expense_loan_payment" name="monthly_expense_loan_payment" readonly><br>

            <label for="monthly_expense_vacancy_loss">Vacancy Loss</label><br>
            <input type="text" id="monthly_expense_vacancy_loss" name="monthly_expense_vacancy_loss" readonly><br>

            <label for="monthly_expense_repairs_and_maintenance">Repairs and Maintenance</label><br>
            <input type="text" id="monthly_expense_repairs_and_maintenance" name="monthly_expense_repairs_and_maintenance" readonly><br>

            <label for="monthly_expense_property_management_fee">Property Management Fee</label><br>
            <input type="text" id="monthly_expense_property_management_fee" name="monthly_expense_property_management_fee" readonly><br>

            <label for="monthly_expense_taxes">Property Taxes</label><br>
            <input type="text" id="monthly_expense_taxes" name="monthly_expense_taxes" readonly><br>

            <label for="monthly_expense_insurance">Insurance</label><br>
            <input type="text" id="monthly_expense_insurance" name="monthly_expense_insurance" readonly><br>

            <label for="monthly_expense_utilities">Utilities</label><br>
            <input type="text" id="monthly_expense_utilities" name="monthly_expense_utilities" readonly><br>

            <label for="monthly_expense_other">Other Expenses</label><br>
            <input type="text" id="monthly_expense_other" name="monthly_expense_other" readonly><br>

            <label for="total_monthly_expenses">Total Monthly Expenses</label><br>
            <input type="text" id="total_monthly_expenses" name="total_monthly_expenses" readonly><br>
        </div>
    </div>

    <h2>Performance Metrics</h2>
    <div class="row">
        <div class="column">
            <label for="yearly_net_income">Yearly Net Income</label><br>
            <input type="text" id="yearly_net_income" name="yearly_net_income" readonly><br>

            <label for="roi">ROI</label><br>
            <input type="text" id="roi" name="roi" readonly><br>

            <label for="cap_rate">Cap Rate</label><br>
            <input type="text" id="cap_rate" name="cap_rate" readonly><br>

            <label for="noi">NOI</label><br>
            <input type="text" id="noi" name="noi" readonly><br>

            <label for="grm">GRM</label><br>
            <input type="text" id="grm" name="grm" readonly><br>
        </div>
    </div>


    <!-- Canvas for Chart.js -->
    
    <!-- 1. Cash Flow Projection Chart -->
    <canvas id="cashFlowProjectionChart" width="400" height="200"></canvas>
    
    <!-- 2. Cap Rate Trend Chart -->
    <canvas id="capRateTrendChart" width="400" height="200"></canvas>
    
    <!-- 3. Break-Even Point Chart -->
    <canvas id="breakEvenChart" width="400" height="200"></canvas>
    
    <!-- 4. Property Value Appreciation Chart -->
    <canvas id="propertyValueChart" width="400" height="200"></canvas>
    
    <!-- 5. Loan Balance Over Time Chart -->
    <canvas id="loanBalanceChart" width="400" height="200"></canvas>
    
    <!-- 6. Expense Breakdown Pie Chart -->
    <canvas id="expenseBreakdownChart" width="400" height="200"></canvas>
    
    <!-- 7. Rent Increase Trend Chart -->
    <canvas id="rentIncreaseChart" width="400" height="200"></canvas>
    
    <!-- 8. NOI Growth Chart -->
    <canvas id="noiGrowthChart" width="400" height="200"></canvas>
    
    <!-- 9. Cash on Cash Return Chart -->
    <canvas id="cashOnCashReturnChart" width="400" height="200"></canvas>
    
    <!-- 10. Debt Service Coverage Ratio (DSCR) Chart -->
    <canvas id="dscrChart" width="400" height="200"></canvas>

    <!-- scripts for charts, calc -->

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="calculator.js"></script>

    <script>


        function syncInput(id, value) {
            document.getElementById(id).value = value;
            document.getElementById(id + "_display").innerText = value;
            calculate(); // Recalculate values when slider changes
        }

        function syncSlider(id, value) {
            document.getElementById(id + "_slider").value = value;
            document.getElementById(id + "_display").innerText = value;
            calculate(); // Recalculate values when input changes
        }


        function calculate() {
            // get input values
            const purchasePrice = Number(document.getElementById("purchase_price").value);
            const downPayment = Number(document.getElementById("down_payment").value);
            const closingCost = Number(document.getElementById("closing_cost").value);
            const otherInitialCost = Number(document.getElementById("other_initial_cost").value);
            const interestRate = Number(document.getElementById("interest_rate").value) / 100 / 12;
            const loanTerm = Number(document.getElementById("loan_term").value) * 12;
            const vacancyRate = Number(document.getElementById("vacancy_rate").value) / 100 / 12;
            const repairsMaintenance = Number(document.getElementById("repairs_maintenance").value);
            const propertyManagement = Number(document.getElementById("property_management").value) / 100 / 12;
            const taxes = Number(document.getElementById("taxes").value) / 12;
            const insurance = Number(document.getElementById("insurance").value) / 12;
            const utilities = Number(document.getElementById("utilities").value);
            const otherExpenses = Number(document.getElementById("other_expenses").value);
            const unit1Rent = Number(document.getElementById("unit1_rent").value);
            const unit2Rent = Number(document.getElementById("unit2_rent").value);
            const unit3Rent = Number(document.getElementById("unit3_rent").value);
            const unit4Rent = Number(document.getElementById("unit4_rent").value);


            // Calculate initial cost
            var initialCostDownPayment = downPayment;
            var initialCostPurchasePrice = purchasePrice;
            var initialCostClosingCost = closingCost;
            var initialCostOther = otherInitialCost;
            var totalInitialCost = downPayment + closingCost + otherInitialCost;

            // Calculate monthly expenses
            var monthlyExpenseLoanPayment = calculateLoanPayment(purchasePrice - downPayment, interestRate, loanTerm);
            var monthlyExpenseVacancyLoss = calculateVacancyLoss(unit1Rent, unit2Rent, unit3Rent, unit4Rent, vacancyRate);
            var monthlyExpenseRepairsMaintenance = repairsMaintenance;
            var monthlyExpensePropertyManagementFee = calculatePropertyManagementFee(unit1Rent, unit2Rent, unit3Rent, unit4Rent, propertyManagement);
            var monthlyExpenseTaxes = taxes;
            var monthlyExpenseInsurance = insurance;
            var monthlyExpenseUtilities = utilities;
            var monthlyExpenseOther = otherExpenses;
            var totalMonthlyExpenses = monthlyExpenseLoanPayment + monthlyExpenseVacancyLoss + monthlyExpenseRepairsMaintenance + monthlyExpensePropertyManagementFee + monthlyExpenseTaxes + monthlyExpenseInsurance + monthlyExpenseUtilities + monthlyExpenseOther;

            // Calculate Performance Metrics
            var grossRentalIncome = unit1Rent + unit2Rent + unit3Rent + unit4Rent;
            var effectiveRentalIncome = grossRentalIncome * (1 - vacancyRate);
            var grossIncome = effectiveRentalIncome;
            var operatingExpense = monthlyExpenseLoanPayment + monthlyExpenseVacancyLoss + monthlyExpenseRepairsMaintenance + monthlyExpensePropertyManagementFee + monthlyExpenseTaxes + monthlyExpenseInsurance + monthlyExpenseUtilities + monthlyExpenseOther;
            var netIncome = grossIncome - operatingExpense;
            var yearlyNetIncome = netIncome * 12;
            var roi = yearlyNetIncome / totalInitialCost * 100;
            var capRate = netIncome / purchasePrice * 100;
            var noi = netIncome + taxes / 12;
            var grm = purchasePrice / grossRentalIncome;

            // display output values

            //initial cost 
            document.getElementById("initial_cost_purchase_price").value = initialCostPurchasePrice.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
            document.getElementById("initial_cost_down_payment").value = initialCostDownPayment.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
            document.getElementById("initial_cost_closing_cost").value = initialCostClosingCost.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
            document.getElementById("initial_cost_other").value = initialCostOther.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
            document.getElementById("total_initial_cost").value = totalInitialCost.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });

            //monthly cost  
            document.getElementById("monthly_expense_loan_payment").value = monthlyExpenseLoanPayment.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
            document.getElementById("monthly_expense_vacancy_loss").value = monthlyExpenseVacancyLoss.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
            document.getElementById("monthly_expense_repairs_and_maintenance").value = monthlyExpenseRepairsMaintenance.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
            document.getElementById("monthly_expense_property_management_fee").value = monthlyExpensePropertyManagementFee.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
            document.getElementById("monthly_expense_taxes").value = monthlyExpenseTaxes.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
            document.getElementById("monthly_expense_insurance").value = monthlyExpenseInsurance.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
            document.getElementById("monthly_expense_utilities").value = monthlyExpenseUtilities.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
            document.getElementById("monthly_expense_other").value = monthlyExpenseOther.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
            document.getElementById("total_monthly_expenses").value = totalMonthlyExpenses.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });

            //add performance metrics 
            document.getElementById("yearly_net_income").value = yearlyNetIncome.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD'
            });
            document.getElementById("roi").value = roi
            document.getElementById("cap_rate").value = capRate
            document.getElementById("noi").value = noi
            document.getElementById("grm").value = grm


            // supportng functions for calculations 	

            function calculateLoanPayment(amount, interest_rate, term) {
                var rate = interest_rate;
                var payment = amount * rate / (1 - Math.pow(1 + rate, -term));
                return payment;
            }

            function calculateVacancyLoss(rent1, rent2, rent3, rent4, vacancy_rate) {
                var total_rent = rent1 + rent2 + rent3 + rent4;
                var vacancy_loss = total_rent * vacancy_rate;
                return vacancy_loss;
            }

            function calculatePropertyManagementFee(rent1, rent2, rent3, rent4, management_fee) {
                var total_rent = rent1 + rent2 + rent3 + rent4;
                var property_management_fee = total_rent * management_fee;
                return property_management_fee;
            }

            function formatCurrency(amount) {
                var formatter = new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                });
                return formatter.format(amount);
            }

            function numberWithCommas(x) {
                return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            }

            //calculations for charts.... 
            
            function updateCashFlowProjectionChart() {
                const ctx = document.getElementById('cashFlowProjectionChart').getContext('2d');
                let cashFlows = [];
                let years = Array.from({ length: 30 }, (_, i) => i + 1);
                let currentIncome = grossRentalIncome * 12; // Annualize
                let currentExpenses = totalMonthlyExpenses * 12;
            
                years.forEach(year => {
                    let projectedIncome = currentIncome * Math.pow(1.03, year); // 3% growth per year
                    let projectedExpenses = currentExpenses * Math.pow(1.02, year); // 2% growth per year
                    cashFlows.push(projectedIncome - projectedExpenses);
                });
            
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: years,
                        datasets: [{
                            label: 'Annual Cash Flow',
                            data: cashFlows,
                            backgroundColor: 'rgba(54, 162, 235, 0.2)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }
            
            function updateCapRateTrendChart() {
                const ctx = document.getElementById('capRateTrendChart').getContext('2d');
                let capRates = [];
                let years = Array.from({ length: 30 }, (_, i) => i + 1);
                let currentValue = purchasePrice; // Starting value
            
                years.forEach(year => {
                    let projectedNOI = noi * Math.pow(1.03, year); // 3% growth per year
                    let projectedValue = currentValue * Math.pow(1.04, year); // 4% appreciation per year
                    capRates.push((projectedNOI / projectedValue) * 100);
                });
            
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: years,
                        datasets: [{
                            label: 'Cap Rate (%)',
                            data: capRates,
                            backgroundColor: 'rgba(255, 99, 132, 0.2)',
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }
            
            function updateBreakEvenChart() {
                const ctx = document.getElementById('breakEvenChart').getContext('2d');
            
                let years = [];
                let cumulativeIncome = [];
                let cumulativeExpenses = [];
                let totalCumulativeIncome = 0;
                let totalExpenses = totalInitialCost;
                let annualAppreciationRate = 0.03; // Assume 3% annual appreciation
                let currentPropertyValue = purchasePrice;
                let breakEvenYear = 0;
            
                for (let year = 1; year <= 30; year++) { // Example: 30 years projection
                    // Calculate property appreciation
                    currentPropertyValue *= (1 + annualAppreciationRate);
            
                    // Annual effective rental income (after vacancy rate)
                    let annualEffectiveRentalIncome = (unit1Rent + unit2Rent + unit3Rent + unit4Rent) * 12 * (1 - vacancyRate);
            
                    // Add yearly income and appreciation
                    totalCumulativeIncome += annualEffectiveRentalIncome + (currentPropertyValue - purchasePrice);
                    cumulativeIncome.push(totalCumulativeIncome);
            
                    // Add yearly operational expenses
                    totalExpenses += totalMonthlyExpenses * 12;
                    cumulativeExpenses.push(totalExpenses);
            
                    // Identify break-even point
                    if (totalCumulativeIncome >= totalExpenses && breakEvenYear === 0) {
                        breakEvenYear = year;
                    }
            
                    years.push(year);
                }
            
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: years,
                        datasets: [
                            {
                                label: 'Cumulative Income',
                                data: cumulativeIncome,
                                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                                borderColor: 'rgba(54, 162, 235, 1)',
                                borderWidth: 1,
                                fill: false
                            },
                            {
                                label: 'Cumulative Expenses',
                                data: cumulativeExpenses,
                                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                                borderColor: 'rgba(255, 99, 132, 1)',
                                borderWidth: 1,
                                fill: false
                            }
                        ]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        },
                        elements: {
                            point: {
                                radius: context => context.dataIndex === breakEvenYear - 1 ? 5 : 0 // Highlight break-even point
                            }
                        },
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        if (context.dataIndex === breakEvenYear - 1) {
                                            return context.dataset.label + ': ' + context.parsed.y + ' (Break-even)';
                                        }
                                        return context.dataset.label + ': ' + context.parsed.y;
                                    }
                                }
                            }
                        }
                    }
                });
            }


            
            function updatePropertyValueChart() {
                const ctx = document.getElementById('propertyValueChart').getContext('2d');
                let propertyValues = [];
                let years = Array.from({ length: 30 }, (_, i) => i + 1);
                let currentValue = purchasePrice;
            
                years.forEach(year => {
                    let projectedValue = currentValue * Math.pow(1.04, year); // 4% appreciation per year
                    propertyValues.push(projectedValue);
                });
            
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: years,
                        datasets: [{
                            label: 'Property Value',
                            data: propertyValues,
                            backgroundColor: 'rgba(255, 206, 86, 0.2)',
                            borderColor: 'rgba(255, 206, 86, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: false
                            }
                        }
                    }
                });
            }
            
            function updateLoanBalanceChart() {
                const ctx = document.getElementById('loanBalanceChart').getContext('2d');
                let loanBalances = [];
                let years = Array.from({ length: loanTerm / 12 }, (_, i) => i + 1);
                let currentBalance = purchasePrice - downPayment;
            
                years.forEach(year => {
                    // Calculate remaining balance; for simplicity, using straight-line amortization
                    let balanceReduction = (purchasePrice - downPayment) / (loanTerm / 12);
                    let newBalance = currentBalance - balanceReduction * year;
                    loanBalances.push(newBalance > 0 ? newBalance : 0);
                });
            
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: years,
                        datasets: [{
                            label: 'Remaining Loan Balance',
                            data: loanBalances,
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: false
                            }
                        }
                    }
                });
            }
            
            function updateExpenseBreakdownChart() {
                const ctx = document.getElementById('expenseBreakdownChart').getContext('2d');
                let expenses = [repairsMaintenance, propertyManagement, taxes, insurance, utilities, otherExpenses];
            
                new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: ['Repairs & Maintenance', 'Property Management', 'Taxes', 'Insurance', 'Utilities', 'Other'],
                        datasets: [{
                            label: 'Expense Breakdown',
                            data: expenses,
                            backgroundColor: [
                                'rgba(255, 99, 132, 0.5)',
                                'rgba(54, 162, 235, 0.5)',
                                'rgba(255, 206, 86, 0.5)',
                                'rgba(75, 192, 192, 0.5)',
                                'rgba(153, 102, 255, 0.5)',
                                'rgba(255, 159, 64, 0.5)'
                            ]
                        }]
                    }
                });
            }
            
            function updateRentIncreaseChart() {
                const ctx = document.getElementById('rentIncreaseChart').getContext('2d');
                let annualRents = [];
                let years = Array.from({ length: 30 }, (_, i) => i + 1);
                let currentRent = unit1Rent + unit2Rent + unit3Rent + unit4Rent;
            
                years.forEach(year => {
                    let projectedRent = currentRent * Math.pow(1.03, year); // 3% increase per year
                    annualRents.push(projectedRent);
                });
            
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: years,
                        datasets: [{
                            label: 'Annual Rent',
                            data: annualRents,
                            backgroundColor: 'rgba(255, 159, 64, 0.2)',
                            borderColor: 'rgba(255, 159, 64, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: false
                            }
                        }
                    }
                });
            }
            
            function updateNOIGrowthChart() {
                const ctx = document.getElementById('noiGrowthChart').getContext('2d');
                let noiValues = [];
                let years = Array.from({ length: 30 }, (_, i) => i + 1);
            
                years.forEach(year => {
                    let projectedNOI = noi * Math.pow(1.03, year); // 3% NOI growth per year
                    noiValues.push(projectedNOI);
                });
            
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: years,
                        datasets: [{
                            label: 'Net Operating Income (NOI)',
                            data: noiValues,
                            backgroundColor: 'rgba(153, 102, 255, 0.2)',
                            borderColor: 'rgba(153, 102, 255, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: false
                            }
                        }
                    }
                });
            }
            
            function updateCashOnCashReturnChart() {
                const ctx = document.getElementById('cashOnCashReturnChart').getContext('2d');
                let cashOnCashReturns = [];
                let years = Array.from({ length: 30 }, (_, i) => i + 1);
            
                years.forEach(year => {
                    let yearlyIncome = calculateYearlyNetIncome(year);
                    let cashOnCashReturn = (yearlyIncome / totalInitialCost) * 100;
                    cashOnCashReturns.push(cashOnCashReturn);
                });
            
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: years,
                        datasets: [{
                            label: 'Cash on Cash Return (%)',
                            data: cashOnCashReturns,
                            backgroundColor: 'rgba(54, 162, 235, 0.2)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }
            
            function updateDSCRChart() {
                const ctx = document.getElementById('dscrChart').getContext('2d');
                let dscrValues = [];
                let years = Array.from({ length: 30 }, (_, i) => i + 1);
            
                years.forEach(year => {
                    let yearlyNOI = calculateYearlyNetIncome(year) + (taxes + insurance) * 12; // NOI includes taxes and insurance
                    let dscr = yearlyNOI / (monthlyExpenseLoanPayment * 12);
                    dscrValues.push(dscr);
                });
            
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: years,
                        datasets: [{
                            label: 'Debt Service Coverage Ratio (DSCR)',
                            data: dscrValues,
                            backgroundColor: 'rgba(255, 99, 132, 0.2)',
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: false
                            }
                        }
                    }
                });
            }

            // Function calls to update each chart
            updateCashFlowProjectionChart();
            updateCapRateTrendChart();
            updateBreakEvenChart();
            updatePropertyValueChart();
            updateLoanBalanceChart();
            updateExpenseBreakdownChart();
            updateRentIncreaseChart();
            updateNOIGrowthChart();
            updateCashOnCashReturnChart();
            updateDSCRChart();

        }
    </script>
</body>

</html>hart();
            updateDSCRChart();

        }
    </script>
</body>

</html>
